// <auto-generated />
using System;
using EFCoreConventions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreConventions.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20241122104213_V2.2")]
    partial class V22
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreConventions.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EFCoreConventions.Models.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("EFCoreConventions.Models.DbTypeTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte>("TestByte")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("TestByteA")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte?>("TestByteNull")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TestDateTimeNull")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TestDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TestDecimalNull")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TestDouble")
                        .HasColumnType("float");

                    b.Property<double?>("TestDoubleNull")
                        .HasColumnType("float");

                    b.Property<int?>("TestIntNull")
                        .HasColumnType("int");

                    b.Property<short>("TestShort")
                        .HasColumnType("smallint");

                    b.Property<string>("TestString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestUShort")
                        .HasColumnType("int");

                    b.Property<long>("TestUnit")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestUnitNull")
                        .HasColumnType("bigint");

                    b.Property<bool>("Testbool")
                        .HasColumnType("bit");

                    b.Property<bool?>("TestboolNull")
                        .HasColumnType("bit");

                    b.Property<int>("Testint")
                        .HasColumnType("int");

                    b.Property<string>("testChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("id");

                    b.ToTable("DbTypeTests");
                });

            modelBuilder.Entity("EFCoreConventions.Models.CustomerAddress", b =>
                {
                    b.HasOne("EFCoreConventions.Models.Customer", "Customer")
                        .WithOne("CustomerAddress")
                        .HasForeignKey("EFCoreConventions.Models.CustomerAddress", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EFCoreConventions.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
